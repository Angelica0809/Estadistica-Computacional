data(esoph)
str(esoph)
View((esoph))
?esoph
?esoph
?esoph
data(esoph)
str(esoph)
View((esoph))
?trees
data(trees)
str(trees)
View(trees)
set.seed(2025)
vector=rpois(40,8)
print(vector)
set.seed(2025)
vector=rpois(40,8)
print(vector)
```{r}
set.seed(2025)
vector=rpois(40,8)
print(vector)
Vector_Ordenado=sort(vector)
print(Vector_Ordenado)
Vector_Ordenado[c(8,20)]
Valores_Pos_Imp=Vector_Ordenado[seq(1, length(Vector_Ordenado), by = 2)]
print(Valores_Pos_Imp)
Vector_Ordenado[c(Vector_Ordenado>3,Vector_Ordenado<8)]
?esoph
data(esoph)
str(esoph)
View(esoph)
?trees
data(trees)
str(trees)
View(trees)
?esoph
data(esoph)
str(esoph)
View(esoph)
?trees
data(trees)
str(trees)
View(trees)
?esoph
data(esoph)
str(esoph)
View(esoph)
?trees
data(trees)
str(trees)
View(trees)
?trees
data(trees)
str(trees)
View(trees)
Library(tidyverse)
library(tidyverse)
library(dplyr)
library(dplyr)
library(tidyverse)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Peso Bajo",
Height<=cuantil[3] ~ "Peso Medio",
Height<=cuantil[4] ~ "Peso Alto",
TRUE~~ "Peso Exagerado"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
vol_max = max(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Peso Bajo",
Height<=cuantil[3] ~ "Peso Medio",
Height<=cuantil[4] ~ "Peso Alto",
TRUE~~ "Peso Exagerado"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
vol_max = max(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Peso Bajo",
Height<=cuantil[3] ~ "Peso Medio",
Height<=cuantil[4] ~ "Peso Alto",
TRUE~ "Peso Exagerado"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
vol_max = max(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Peso Bajo",
Height<=cuantil[3] ~ "Peso Medio",
Height<=cuantil[4] ~ "Peso Alto",
TRUE~ "Peso Muy Alto"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
vol_max = max(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Peso Bajo",
Height<=cuantil[3] ~ "Peso Medio",
Height<=cuantil[4] ~ "Peso Alto",
TRUE~ "Peso Muy Alto"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
vol_max = max(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Peso Bajo",
Height<=cuantil[3] ~ "Peso Medio",
Height<=cuantil[4] ~ "Peso Alto",
TRUE~ "Peso Muy Alto"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_max = max(Volume, na.rm = TRUE),
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
sd_vol=sd(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Bajito",
Height<=cuantil[3] ~ "Mediano",
Height<=cuantil[4] ~ "Alto",
TRUE~ "Altisimo"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_max = max(Volume, na.rm = TRUE),
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
sd_vol=sd(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Bajo",
Height<=cuantil[3] ~ "Mediano",
Height<=cuantil[4] ~ "Alto",
TRUE~ "Muy Alto"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_max = max(Volume, na.rm = TRUE),
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
sd_vol=sd(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
TRUE~ "Muy Alto",
Height<=cuantil[4] ~ "Alto",
Height<=cuantil[3] ~ "Mediano",
Height<=cuantil[2] ~ "Bajo"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_max = max(Volume, na.rm = TRUE),
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
sd_vol=sd(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Bajo",
Height<=cuantil[3] ~ "Mediano",
Height<=cuantil[4] ~ "Alto",
TRUE~ "Altisimo"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_max = max(Volume, na.rm = TRUE),
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
sd_vol=sd(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[1] ~ "Bajo",
Height<=cuantil[2] ~ "Mediano",
Height<=cuantil[3] ~ "Alto",
TRUE~ "Altisimo"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_max = max(Volume, na.rm = TRUE),
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
sd_vol=sd(Volume, na.rm = TRUE)
)
library(tidyverse)
library(dplyr)
cuantil= quantile(trees$Height, q= c(0, 0.25, 0.50, 0.75, 1), na.rm = TRUE)
trees %>%
mutate(Height_Categorizada=case_when(
Height<=cuantil[2] ~ "Bajo",
Height<=cuantil[3] ~ "Mediano",
Height<=cuantil[4] ~ "Alto",
TRUE~ "Altisimo"
)) %>% group_by(Height_Categorizada) %>%
summarise(
vol_max = max(Volume, na.rm = TRUE),
vol_prom = mean(Volume, na.rm = TRUE),
vol_min = min(Volume, na.rm = TRUE),
sd_vol=sd(Volume, na.rm = TRUE)
)
set.seed(2025)
vector2=rgamma(60,shape = 4,scale = 1.5)
print(vector2)
Multiplos=vector2[wich(round(vector2)%%2==0)]
Multiplos=vector2[which(round(vector2)%%2==0)]
Multiplos
Multiplos=vector2[(round(vector2)%%2==0)]
Multiplos
set.seed(2025)
vector2=rgamma(60,shape = 4,scale = 1.5)
print(vector2)
Multiplos=vector2[(round(vector2)%%2==0)]
Multiplos
rquote="r’s internals are irrefutably intriguing"
chars=strsplit(rquote,"")
chars
rquote="r’s internals are irrefutably intriguing"
chars=strsplit(rquote,"")
chars
Look_U<-0
for(i in 1:length(chars)){
if chars[i]=="u"){
rquote="r’s internals are irrefutably intriguing"
chars=strsplit(rquote,"")
chars
Look_U<-0
for(i in 1:length(chars)){
if chars[i]=="u"){
rquote="r’s internals are irrefutably intriguing"
chars=strsplit(rquote,"")[[1]]
chars
Look_U<-0
for(i in 1:length(chars)){
if chars[i]=="u"){
rquote <- "r’s internals are irrefutably intriguing"
chars <- strsplit(rquote, "")[[1]]
Look_U <- 0
for (i in 1:length(chars)) {
if (chars[i] == "u") {
Look_U <- i
break
}
}
print(Look_U)
rquote <- "r’s internals are irrefutably intriguing"
chars <- strsplit(rquote, "")[[1]]
Num_r<- 0
for (i in 1:length(chars)) {
if (chars[i] == "u") {
Look_U <- i
break
}
if (chars[i] == "r") {
count_r <-Num_r + 1
}
}
print("El numero de R's antes de encontrar la primera U es ", Num_r)
print(paste("El numero de R's antes de encontrar la primera U es ", Num_r))
rquote <- "r’s internals are irrefutably intriguing"
chars <- strsplit(rquote, "")[[1]]
Num_r<- 0
for (i in 1:length(chars)) {
if (chars[i] == "u") {
Look_U <- i
break
}
if (chars[i] == "r") {
count_r <-Num_r + 1
}
}
print(paste("El numero de R's antes de encontrar la primera U es ", Num_r))
rquote <- "r’s internals are irrefutably intriguing"
chars <- strsplit(rquote, "")[[1]]
Num_r<- 0
for (i in 1:length(chars)) {
if (chars[i] == "u") {
Num_r <- i
break
}
if (chars[i] == "r") {
count_r <-Num_r + 1
}
}
print(paste("El numero de R's antes de encontrar la primera U es ", Num_r))
chars <- strsplit(rquote, "")[[1]]
Num_r <- 0
for (i in 1:length(chars)) {
if (chars[i] == "u") {
break
}
if (chars[i] == "r") {
Num_r <- Num_r + 1
}
}
print(paste("El número de 'r' antes de encontrar la primera 'u' es:", Num_r))
rquote <- "r’s internals are irrefutably intriguing"
chars <- strsplit(rquote, split="")[[1]]
Num_r <- 0
for (i in 1:length(chars)) {
if (chars[i] == "u") {
break
}
if (chars[i] == "r") {
Num_r <- Num_r + 1
}
}
print(paste("El número de 'r' antes de encontrar la primera 'u' es:", Num_r))
extraccion=0
numero_mayor_90=0
historial=c()
while(numero_mayor_90<3){
numero=sample(1:100,1)
extraccion=extraccion+1
historial=c(historial,numero)
if(numero>90){
numero_mayor_90=numero_mayor_90+1
}
}
print(paste("Aqui esta el Historial de numeros extraidos:",historial))
print(paste("El total de extracciones fue:",extraccion))
extraccion=0
numero_mayor_90=0
historial=c()
while(numero_mayor_90<3){
numero=sample(1:100,1)
extraccion=extraccion+1
historial=c(historial,numero)
if(numero>90){
numero_mayor_90=numero_mayor_90+1
}
}
print(historial)
print(paste("El total de extracciones fue:",extraccion))
RIC=function(){
x=rbeta(40,5)
sort(x)
Q1=x[round(0.25*length(x))]
Q3=x[round(0.75*length(x))]
ric=Q3-Q1
print(paste("El Rango Intercualitico es:",ric))
}
RIC()
RIC=function(){
x=rbeta(40,5,5)
sort(x)
Q1=x[round(0.25*length(x))]
Q3=x[round(0.75*length(x))]
ric=Q3-Q1
print(paste("El Rango Intercualitico es:",ric))
}
RIC()
RIC=function(){
x=rbeta(40,5,1)
sort(x)
Q1=x[round(0.25*length(x))]
Q3=x[round(0.75*length(x))]
ric=Q3-Q1
print(paste("El Rango Intercualitico es:",ric))
}
RIC()
